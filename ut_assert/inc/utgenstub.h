/**
 * \file
 *
 * Provides a set of macros to facilitate generating stub code
 *
 * These macros are primarily used in the code generated by the "generate_stubs.pl" script
 */

#ifndef UTGENSTUB_H
#define UTGENSTUB_H

#include "common_types.h"
#include "utstubs.h"

/**
 * Helper macro to set up a return buffer in a generated stub
 *
 * Registers a buffer that the hook/handler can fill.  This works
 * with any return data type, not just int32.
 *
 * \param FuncName   The name of the function
 * \param ReturnType The type of return value
 */
#define UT_GenStub_SetupReturnBuffer(FuncName, ReturnType) \
    UT_Stub_RegisterReturnType(UT_KEY(FuncName), sizeof(ReturnType))

/**
 * Helper macro to get the return value from the handler
 *
 * Gets the value exported from the hook/handler
 *
 * \param FuncName   The name of the function
 * \param ReturnType The type of return value
 */
#define UT_GenStub_GetReturnValue(FuncName, ReturnType) \
    (*(ReturnType *)UT_Stub_GetReturnValuePtr(UT_KEY(FuncName), sizeof(ReturnType)))

/**
 * Helper macro to add a local parameter to the current context
 *
 * This makes the parameter accessible from hook/handler functions
 *
 * \param FuncName   The name of the function
 * \param ParamType  The type of the parameter
 * \param ParamName  The name of the parameter
 */
#define UT_GenStub_AddParam(FuncName, ParamType, ParamName)                                                           \
    UT_Stub_RegisterContextWithMetaData(UT_KEY(FuncName), #ParamName, UT_STUBCONTEXT_ARG_TYPE_INDIRECT, &(ParamName), \
                                        sizeof(ParamType))

/**
 * Helper macro to execute the actual stub handler
 *
 * Additional arguments are passed through
 *
 * \param FuncName   The name of the function
 * \param Type       The type of handler to execute (Va or Basic)
 */
#define UT_GenStub_Execute(FuncName, Type, ...) UT_Execute##Type##Handler(UT_KEY(FuncName), #FuncName, __VA_ARGS__);

#endif /* UTGENSTUB_H */
